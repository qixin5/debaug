package edu.gatech.cc.debaug;

import java.util.List;
import java.util.ArrayList;
import java.util.Set;
import java.util.HashSet;
import java.io.File;
import org.apache.commons.io.FileUtils;

//This class is tailored to the syntax of file whose path is origin_test_fpath.
public class MakeTestGen
{
    public static void main(String[] args) {
	String origin_test_fpath = "/home/qxin6/debaug_expt/debaug/benchmark/make-3.79_template/testscript/test_all.universe.sh";
	
	File torun_scripts_file = new File(args[0]);
	String output_dpath = args[1];


	//Read original test script
	List<String> origin_test_flines = null;
	try { origin_test_flines = FileUtils.readLines(new File(origin_test_fpath)); }
	catch (Throwable t) { System.err.println(t); t.printStackTrace(); }
	if (origin_test_flines == null) { return; }


	//Read test ids selected to produce tests
	List<String> testids = null;
	try { testids = FileUtils.readLines(torun_scripts_file); }
	catch (Throwable t) { System.err.println(t); t.printStackTrace(); }
	if (testids == null) { return; }

	
	//Get script ctnt and write to file
	int counter = 0;
	for (String testid : testids) {
	    String script_ctnt = getScriptCtnt(origin_test_flines, testid, counter);
	    try { FileUtils.writeStringToFile(new File(output_dpath+"/"+(counter++)), script_ctnt); }
	    catch (Throwable t) { System.err.println(t); t.printStackTrace(); }
	}
    }


    
    private static String getScriptCtnt(List<String> origin_test_flines, String testid, int newtestid) {
	String old_bin_path = "/home/qxin6/debaug_expt/debaug/benchmark/make-3.79_template/make-3.79";
	String old_input_path0 = "../inputs";
	String old_input_path1 = "../../inputs";
	String old_input_path2 = "${experiment_root}/make/inputs";

	String old_output_path0 = "../outputs";
	String old_output_path1 = "/home/qxin6/debaug_expt/debaug/working/make/outputs";
	String old_output_path2 = "${experiment_root}/make/outputs";

	String old_sdir_path0 = "~/research/subjects/make/scripts/sdir";
	String old_sdir_path1 = "${experiment_root}/make/scripts/sdir";
	
	String old_rm_makestuff_fpath = "/home/qxin6/debaug_expt/debaug/working/make/testplans.alt/testscripts/rm-makestuff";
	String new_rm_makestuff_fpath = "/home/qxin6/debaug_expt/debaug/benchmark/make-3.79_template/testscript/util/rm-makestuff";

	String makecleanup_fpath = "/home/qxin6/debaug/bin/makeoutputcleanup";
	String clean_bad_chars_fpath = "/home/qxin6/debaug_expt/debaug/benchmark/make-3.79_template/testscript/util/clean_bad_chars";


	int flines_size = origin_test_flines.size();
	
	int sl = -1;
	for (int i=0; i<flines_size; i++) {
	    String origin_test_fline = origin_test_flines.get(i).trim();
	    if (("echo \">>>>>>>>running test "+testid+"\"").equals(origin_test_fline)) {
		sl = i;
		break;
	    }
	}

	if (sl == -1) {
	    System.err.println("Didn't find test id: " + testid + " in the original test script.");
	    return null;
	}

	//int realtestid = -1;
	//String realtestid_line = origin_test_flines.get(sl+1);
	//realtestid = Integer.parseInt(realtestid_line.substring("#Test Case".length(), realtestid_line.indexOf(";")).trim());
	//if (realtestid == -1) {
	//    System.err.println("Failed to obtain the real test id from line: " + realtestid_line);
	//    return null;
	//}
	
	StringBuilder sb = new StringBuilder();
	sb.append("#!/bin/bash\n\n");
	sb.append("BIN=$1\nOUTDIR=$2\nTIMEOUT=$3\nINDIR=$4\n");
	sb.append("CURRDIR=$(pwd)\n\n");


	//Fetch the rm-makestuff_line first
	String old_rm_makestuff_line = null;
	for (int j=sl+2; j<flines_size; j++) {
	    String origin_test_fline = origin_test_flines.get(j).trim();
            if ("".equals(origin_test_fline)) {
		if (j+1<flines_size &&
		    origin_test_flines.get(j+1).startsWith("echo \">>>>>>>>")) { break;	}
		else { continue; }
	    }
	    if (origin_test_fline.startsWith(old_rm_makestuff_fpath)) {
		old_rm_makestuff_line = origin_test_fline;
		break;
	    }
	}	


	for (int j=sl+2; j<flines_size; j++) {
	    String origin_test_fline = origin_test_flines.get(j).trim();
	    if ("".equals(origin_test_fline)) {
		if (j+1<flines_size &&
		    origin_test_flines.get(j+1).startsWith("echo \">>>>>>>>")) { break;	}
		else { continue; }
	    }

	    if (origin_test_fline.startsWith("#")) { continue; } //Omit comments
	    if (origin_test_fline.startsWith(old_rm_makestuff_fpath)) { continue; } //Omit it, as we've processed this line somewhere else

	    //Bin executing line
	    if (origin_test_fline.startsWith(old_bin_path)) {
		String cmd0 = origin_test_fline;
		cmd0 = cmd0.replace(old_bin_path, "$BIN");
		cmd0 = cmd0.replace(old_input_path2+"/", "$INDIR/"); //Note the ordering
		cmd0 = cmd0.replace(old_input_path1+"/", "$INDIR/"); //Note the ordering
		cmd0 = cmd0.replace(old_input_path0+"/", "$INDIR/"); //Note the ordering
		cmd0 = cmd0.replace(old_sdir_path1, "$CURRDIR/sdir");
		cmd0 = cmd0.replace(old_sdir_path0, "$CURRDIR/sdir");

		//System.err.println(testid);
		//System.err.println("Check this: " + cmd0);

		//Split, fix the output path, and re-combine
		String[] cmd0_comps = cmd0.split("\\s+");
		cmd0 = null;
		for (String cmd0_comp : cmd0_comps) {
		    if (cmd0 == null) { cmd0 = ""; }
		    else { cmd0 += " "; }

		    if (cmd0_comp.startsWith(old_output_path2+"/t")) {
			cmd0 += "$OUTDIR/o"+newtestid;
		    }
		    else if (cmd0_comp.startsWith(old_output_path1+"/t")) {
			cmd0 += "$OUTDIR/o"+newtestid;
		    }
		    else if (cmd0_comp.startsWith(old_output_path0+"/t")) {
			cmd0 += "$OUTDIR/o"+newtestid;
		    }
		    else {
			if ("968".equals(testid)) {
			    if (cmd0_comp.equals("${HOME}///research//subjects///make/scripts/sdir/include///")) {
				cmd0 += "$CURRDIR/sdir/include///";
				continue;
			    }
			}
			cmd0 += cmd0_comp;
		    }
		}
		
		
		//cmd0 = cmd0.replace(old_output_path2+"/t"+realtestid+".out", "$OUTDIR/o"+newtestid);		
		//cmd0 = cmd0.replace(old_output_path1+"/t"+realtestid+".out", "$OUTDIR/o"+newtestid);
		//cmd0 = cmd0.replace(old_output_path0+"/t"+realtestid+".out", "$OUTDIR/o"+newtestid);		
		
		sb.append("timeout -k 9 ${TIMEOUT}s ");
		sb.append(cmd0+"\n");

		if (old_rm_makestuff_line != null) {
		    //Perform the output cleanup right here
		    String cmd1 = old_rm_makestuff_line;
		    String[] cmd1_comps = cmd1.split("\\s+");
		    cmd1 = null;
		    for (String cmd1_comp : cmd1_comps) {
			if (cmd1 == null) { cmd1 = ""; }
			else { cmd1 += " "; }

			if (cmd1_comp.equals(old_rm_makestuff_fpath)) {
			    cmd1 += new_rm_makestuff_fpath;
			}
			else if (cmd1_comp.startsWith(old_output_path2+"/t")) {
			    cmd1 += "$OUTDIR/o"+newtestid;
			}
			else if (cmd1_comp.startsWith(old_output_path1+"/t")) {
			    cmd1 += "$OUTDIR/o"+newtestid;
			}
			else if (cmd1_comp.startsWith(old_output_path0+"/t")) {
			    cmd1 += "$OUTDIR/o"+newtestid;
			}
			else {
			    cmd1 += cmd1_comp;
			}

			//cmd1 = cmd1.replace(old_rm_makestuff_fpath, new_rm_makestuff_fpath);
			//cmd1 = cmd1.replace(old_output_path2+"/t"+realtestid+".out", "$OUTDIR/o"+newtestid);		    
			//cmd1 = cmd1.replace(old_output_path1+"/t"+realtestid+".out", "$OUTDIR/o"+newtestid);
			//cmd1 = cmd1.replace(old_output_path0+"/t"+realtestid+".out", "$OUTDIR/o"+newtestid);		       
		    }

		    sb.append(cmd1+"\n");
		}

		//Use makeoutputcleanup to leave out any time info
		sb.append(makecleanup_fpath + " $OUTDIR/o" + newtestid + "\n");

		//Remove garbage characters
		//sb.append(clean_bad_chars_fpath + " $OUTDIR/o" + newtestid + "\n");

		//Move any default.profraw file
		sb.append("if [ -f default.profraw ]; then\n");
		sb.append("    mv default.profraw ${CURRDIR}/\n");
		sb.append("fi\n");
		
		sb.append("\n");
	    }

	    //Result moving line
	    else if (origin_test_fline.startsWith("mv ")) {
		String[] cmds = origin_test_fline.split("\\s+");
		sb.append("mv ");
		sb.append(cmds[1]);
		sb.append(" ");
		sb.append("$OUTDIR/o"+newtestid+"_binary");
		sb.append("\n");
	    }

	    else if (origin_test_fline.startsWith("cp ") ||
		     origin_test_fline.startsWith("setenv ")) {
		String cmd2 = origin_test_fline;
		cmd2 = cmd2.replace(old_input_path1+"/", "$INDIR/");
		cmd2 = cmd2.replace(old_input_path0+"/", "$INDIR/");

		if (origin_test_fline.startsWith("setenv ")) {
		    String[] comps = cmd2.split("\\s+");
		    cmd2 = "export ";
		    if (comps.length == 3) {
			cmd2 += comps[1] + "=\"" + comps[2] + "\"";
		    }
		    else if (comps.length == 2) {
			cmd2 += comps[1] + "=\"\"";
		    }
		    else {
			System.err.println("I don't recognize this line: " + origin_test_fline);
			return null;
		    }
		}
		
		sb.append(cmd2+"\n");
	    }

	    else if (origin_test_fline.startsWith("cd ") ||
		     origin_test_fline.startsWith("rm ")) {
		sb.append(origin_test_fline+"\n");
	    }

	    else {
		System.err.println("Unknown line: " + origin_test_fline);
	    }
	}
	
	return sb.toString();
    }
}
